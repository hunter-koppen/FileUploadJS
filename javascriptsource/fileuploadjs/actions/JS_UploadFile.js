// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
import "mx-global";
import { Big } from "big.js";

// BEGIN EXTRA CODE
// END EXTRA CODE

/**
 * Action to upload a file, returns an errorstring if something went wrong while uploading.
 * @param {MxObject} file
 * @param {string} mimeTypes - For example: image/*,audio/*,video/*,application/*, leave empty to allow all.
 * @returns {Promise.<string>}
 */
export async function JS_UploadFile(file, mimeTypes) {
	// BEGIN USER CODE
	return new Promise((resolve, reject) => {
		try {
			const fileInput = document.createElement("input");
			fileInput.style.position = "absolute";
			fileInput.style.left = "-9999px";
			fileInput.name = "fileupload";
			fileInput.id = "fileupload";
			fileInput.type = "file";
			if (mimeTypes) {
				fileInput.accept = mimeTypes;
			}
			fileInput.multiple = false;
			fileInput.onchange = onChange;

			document.body.appendChild(fileInput);
			fileInput.click();
			document.body.removeChild(fileInput);

			const deviceType = mx.ui.getProfile();
			if (deviceType == "desktop") {
				document.body.onfocus = documentChange
			} else {
				document.body.onfocus = documentChange
				document.body.addEventListener("touchstart", documentChange, false);
			}

			function onChange(event) {
				const newFile = event.target.files[0];
				const guid = file.getGuid();
				const pid = mx.ui.showProgress(null, true);
				
				// Check if the uploaded file type matches the accepted types
				const acceptedTypes = fileInput.accept.split(",");
				const fileType = newFile.type;
				const isAccepted = acceptedTypes.some(type => new RegExp(type).test(fileType));

				if (!isAccepted) {
					resolve("The uploaded file type is not accepted.");
					mx.ui.hideProgress(pid);
					return;
				}

				mx.data.saveDocument(
					guid,
					newFile.name,
					null,
					newFile,
					function() {
						resolve();
						mx.ui.hideProgress(pid);
					},
					function(error) {
						reject(error);
						mx.ui.hideProgress(pid);
					}
				);
			}

			function documentChange() {
				document.body.onfocus = null;
				setTimeout(() => {
					if (!fileInput.files.length) {
						resolve();
					}
				}, 200);
			}
		} catch (error) {
			reject(error);
		}
	});
	// END USER CODE
}
